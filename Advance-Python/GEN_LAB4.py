# 1. Implement a generator function fibonacci_generator that yields Fibonacci
# numbers indefinitely. Write a function sum_fibonacci that computes the sum of
# the first 10 Fibonacci numbers generated by this function.

# DEFINE THE GENE
def fibonacci_generator():
    fib_sequence = [0, 1]
    yield fib_sequence[0]
    yield fib_sequence[1]
    
    while True:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        yield next_fib
        fib_sequence.append(next_fib)

def sum_fibonacci(n=10):
    fib_gen = fibonacci_generator()
    return sum(next(fib_gen) for _ in range(n))

# SUM OF THE FIRST 10 FIBONACCI NUM
print(sum_fibonacci()) 



# 2.Define a generator function prime_number_generator that yields prime
# numbers indefinitely. Print the first 15 prime numbers generated by this function.

def prime_number_generator():
    # START FROM THE FIRST PRIME NUM
    num = 2
    while True:
        if is_prime(num):
            yield num
        num += 1

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# GENERATE FIRST 15 PRIME NUM
prime_gen = prime_number_generator()
first_15_primes = [next(prime_gen) for i in range(15)]
print(first_15_primes)